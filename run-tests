#!/bin/bash

RED='\033[0;31m'
PURPLE='\033[0;35m'
GRAY='\033[1;30m'
NC='\033[0m'

myself="$(realpath $0)"
preset_min='7.3 8.* lowest 5.7'
preset_max='8.2 11.* stable 8.4'
compose_project_name=${PWD##*\/}

if [[ $# == 1 && ($1 == '--help' || $1 == 'help' || $1 == 'h' || $1 == '?') ]]; then
    echo 'Usage:'
    echo -e "${PURPLE}run-tests min${NC}: run tests with the lowest requirements (PHP 7.3, Laravel 8)"
    echo -e "${PURPLE}run-tests min${NC}: run tests with the highest requirements (PHP 8.2, Laravel 11)"
    echo -e "${PURPLE}run-tests <PHP_VERSION> <LARAVEL_VERSION> <DEPENDENCY_VERSION=lowest|stable> <MYSQL_VERSION>${NC}: run tests with the specicied requirements"
    echo -e "${PURPLE}run-tests${NC}: run tests with the same requirements as previous run"
    exit 0
fi

if [ $# -eq 0 ] && [ ! -f .env ]; then
    $myself $preset_max
    exit $?
fi

# Try to load preset
if [[ $# = 1 && $1 =~ ^[a-zA-Z_]+$ ]]; then
    preset="preset_$1"
    if [ -z ${!preset+x} ]; then
        echo -e "${RED}Preset $1 does not exist${NC}"
        exit 1
    fi
    args=${!preset}
    $myself $args
    exit $?
fi

# Check if variable exists in .env file
env_exists() {
    touch .env
    grep "$1=" .env >>/dev/null
    return $?
}

# Add variable to .env file unless it already exists
env_add() {
    if ! env_exists $1; then
        echo "$1=$2" >> .env
        return $?
    fi
    return 1
}

# Add or replace variable in .env file
env_replace() {
    env_add ${1} ${2} || sed -i -E "s/^${1}=.*$/${1}=${2}/g" .env
    return $?
}

# Set env variables for docker compose
env_add COMPOSE_PROJECT_NAME $compose_project_name
env_add UID $(id -u)
env_add GID $(id -g)
env_add COMPOSER_CACHE_DIR $(composer config -g cache-dir 2>/dev/null || echo "$HOME/.composer/cache")

# Rebuild PHP image if needed
if [ $# -gt 0 ]; then
    php_version=$1
    laravel_version=${2:-'*'}
    dependency_version=${3:-'stable'}
    mysql_version=${4:-'8.4'}

    echo
    echo -e "Testing ${PURPLE}PHP ${php_version}${NC} / ${PURPLE}Laravel ${laravel_version}${NC} with ${PURPLE}${dependency_version}${NC} dependencies / ${PURPLE}MySQL ${mysql_version}${NC}"
    echo

    env_replace PHP_VERSION $php_version
    env_replace MYSQL_VERSION $mysql_version

    docker compose down
    docker volume rm ${compose_project_name}_mysql_data >/dev/null 2>&1 
fi

# Start containers
docker compose up --no-recreate -d

# Reinstall packages if needed
if [ $# -gt 0 ]; then
    docker compose exec php rm -f /app/composer.lock
    docker compose exec php composer update --with laravel/framework:$laravel_version --prefer-$dependency_version --prefer-dist --no-interaction
fi

# Run tests
echo
docker compose exec php ./vendor/bin/phpunit
echo

# Show remaining containers
echo -e "${GRAY}Remaining containers:${NC}"
echo -e "${GRAY}=====================${NC}"
docker compose ps -a
